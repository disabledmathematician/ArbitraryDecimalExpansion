#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar 22 11:06:54 2023

Copyright Charles Thomas Wallace Truscott

Byron Bay 127 Broken Head Rd NSW 2481 Australia

:-)
"""

class Arithmetic(object):
    
    def __init__(self, number):
        self.number = str(number)
        self.part = number.split('.')
        self.l_part = str(self.part[0])
        self.r_part = str(self.part[1])
        
    def __add__(self, v):
#        apc = 0
#        lpc = 0
##        print("self.r_part[0]: {}".format(self.r_part[0]))
#        if v.r_part[0] == '0':
#            for x in range(len(v.r_part)):
##                print("fl {} {} {}".format(x, v.r_part[x], apc))
#                if v.r_part[x] != '0':
#                    break
#                else:
#                    apc += 1
#            v.r_part = int(v.r_part)
#            v.r_part /= (10 ** apc)
#        if self.r_part[0] == '0':
#            for x in range(len(self.r_part)):
#                if self.r_part[x] != '0':
#                    break
#                else:
#                    lpc += 1
#            self.r_part = int(self.r_part)
#            self.r_part /= (10 ** lpc)
#        print("apc: {} lpc: {}".format(apc, lpc))
        left_summand = int(self.l_part)
        right_summand = int(self.r_part)
        left_summand_two = int(v.l_part)
        right_summand_two = int(v.r_part)
        lrs1 = len(str(self.r_part))
        lrs2 = len(str(v.r_part))
        c = left_summand + left_summand_two
        q = right_summand + right_summand_two
        z = lrs1 if lrs1 >= lrs2 else lrs2
        j = len(str(q))
        x = abs(j - z)
        if x > 0:
            sq = str(q)
            print(sq, type(sq))
            num = int(sq[0:x])
            c += num
        r = str('{}.{}'.format(c, str(q)[x:]))
 #       print(r)
        return Arithmetic(r)
    def __sub__(self, v):
 #        apc = 0
#        lpc = 0
##        print("self.r_part[0]: {}".format(self.r_part[0]))
#        if v.r_part[0] == '0':
#            for x in range(len(v.r_part)):
##                print("fl {} {} {}".format(x, v.r_part[x], apc))
#                if v.r_part[x] != '0':
#                    break
#                else:
#                    apc += 1
#            v.r_part = int(v.r_part)
#            v.r_part /= (10 ** apc)
#        if self.r_part[0] == '0':
#            for x in range(len(self.r_part)):
#                if self.r_part[x] != '0':
#                    break
#                else:
#                    lpc += 1
#            self.r_part = int(self.r_part)
#            self.r_part /= (10 ** lpc)
#        print("apc: {} lpc: {}".format(apc, lpc))
        left_summand = int(self.l_part)
        right_summand = int(self.r_part)
        left_summand_two = int(v.l_part)
        right_summand_two = int(v.r_part)
        lrs1 = len(str(self.r_part))
        lrs2 = len(str(v.r_part))
        lrsb = lrs1 if lrs1 >= lrs2 else lrs2
        c = left_summand + (-left_summand_two)
        q = right_summand + (-right_summand_two)
        z = lrs1 if lrs1 >= lrs2 else lrs2
        j = len(str(q))
        x = abs(j - z)
#        if x > 0:
#            sq = str(q)
#            print(sq, type(sq))
#            num = int(sq[0:x])
#            c += num
        print(lrsb, q, abs(q) - int('9'*(lrsb)))
        if right_summand < right_summand_two:
            if q < 0:
                c -= 1
            q = abs(q) - int(str('9'*lrsb))
        if q == 0:
            q = str('0'*lrsb)
            r = str('{}.{}'.format(c, q))
        else:
            r = str('{}.{}'.format(c, str(abs(q))[0:]))
        print(r)
        return Arithmetic(r)
    def __mul__(self):
        pass
    def __truediv__(self):
        pass
    def __floordiv__(self):
        pass
    def __pow__(self):
        pass
    def __str__(self):
        return self.number
    
def CharlesTruscottApproachArithmetic():
#    number = Arithmetic("00000000.0000000000")
#    number_also = Arithmetic("3333333333.33333333333333333333")
#    for x in range(0, 2):
#        number_also = number_also + number_also
#    print(number_also + Arithmetic("3333333333.33333333333333333333"))
    number = Arithmetic("10.000000")
    number2 = Arithmetic("3.333333")
    a = number - number2 - number2 - number2
if __name__ == "__main__": CharlesTruscottApproachArithmetic()